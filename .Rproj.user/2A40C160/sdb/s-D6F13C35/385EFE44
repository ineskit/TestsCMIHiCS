{
    "collab_server" : "",
    "contents" : "---\ntitle: \"Experiments CMI & HiCS\"\nauthor: \"Ines Machinek\"\ndate: \"December 6th, 2016\"\noutput: html_document\n---\n\n```{r setup, include=FALSE}\nlibrary(stringr)\nlibrary(dplyr)\nlibrary(ggplot2)\nlibrary(tidyr)\nlibrary(data.table)\nlibrary(knitr)\nknitr::opts_chunk$set(echo = TRUE)\nread_chunk(\"generatePlots.R\")\n```\n\n##  Comparing CMI and HiCS Subspace Search using real-world datasets\n\n### Overview\nThis document contains the results of a comparison of the algorithms CMI, HiCS & GMD.\nFor further documentation, see:\n<ul>\n  <li>\n    Nguyen, Hoang, Vreeken, Jilles, Mueller, Emmanuel, Keller, Fabian and Klemens Boehm. 2013.\n    \"CMI: An Information-Theoretic Contrast Measure for Enhancing Subspace Cluster and Outlier Detection\"\n  </li>\n  <li>\n    Keller, Fabian, Emmanuel Mueller, and Klemens Boehm. 2012. \"HiCS: High Contrast Subspaces for Density-Based Outlier Ranking.\" In 2012 IEEE 28th   \n    International Conference on Data Engineering, 1037-48. IEEE.\n  </li>\n</ul>\nCMI and HiCS algorithms were implemented in inline c++ in R, using the Rcpp-package.\nExperiments ran on Intel core i7-4600U CPU and 8 GB RAM.\n\n<br>\n<br>\n\n### Datasets\nThe datasets for testing were:\n\n```{r echo = FALSE, results = 'asis'}\n\nDatasets <- c(\"Ann Thyroid\", \"Diabetes\", \"Glass\", \"Ion\", \"Lympho\", \"Pendigits\", \"Segment\")\nRows <- c(3772, 768, 214, 351, 148, 6737, 2013)\nDimensions <- c(6, 8, 7, 32, 18, 16, 19)\n\ndf <-data.frame(Datasets,Rows,Dimensions)\n\nkable(df, caption = \"Datasets - Overview\")\n```\n\n\nDatasets can be downloaded here: \n[IPD, KIT Karlsruhe](http://www.ipd.uni-karlsruhe.de/~muellere/HiCS/)\n<br>\n<br>\n\n### Run Experiments\n1. Download the datasets into the *datasets* folder\n2. Source the *HICSvsCMI_Experiments.R* script\n3. Start experiment by calling **runExperiments**-function, for example:\n```{r eval=FALSE}\n  finalResult <- runExperiments(inputPath = \"datasets\", maxMinPts = 100, numCores=1, topkSearch = 500, topkOutput = 100)\n```\nAutomatically a file *experimentResult.RData* will be written to the *results* folder.\n\nResults can be loaded by\n```{r eval=FALSE}\nload(\"results/experimentResult.RData\")\n```\nThis Rmd-File assumes one RData-File per dataset to knit the results properly. \n<br>\n<br>\n\n\n### Results\nThe following results, unless otherwise noted, were observed after having run the algorithms with the parameters: <br>\n* maxMinPts = 100   <br>\n* numCores=1        <br>\n* topkSearch = 500  <br>\n* topkOutput = 100   <br>\n\n\n#### AUC on real world data \n#### Algorithms: HiCS and CMI\n<!-- todo: AUC automatisiert auslesen aus den Dateien -->\n```{r, echo=FALSE}\nDataset = c(\"Thyroid\",\"Thyroid\",\"Glass\",\"Glass\",\"Ion\", \"Ion\", \"Pendigits\",\"Pendigits\",\"Segment\",\"Segment\", \"Lympho\",\"Lympho\") \nAlgorithm = c(\"CMI\", \"HiCS\",\"CMI\", \"HiCS\",\"CMI\", \"HiCS\",\"CMI\", \"HiCS\", \"CMI\", \"HiCS\", \"CMI\", \"HiCS\")\n\nAUC <- c(0.953, 0.953, 0.798, 0.800, 0.763, 0.731, 0.956, 0.904, 0.905, 0.825, 0.930, 0.869)\ndfAuc = data.frame(Dataset, Algorithm, AUC) \n\n\nlibrary(ggplot2)\nggplot(dfAuc, aes(factor(Dataset), dfAuc$AUC, fill=Algorithm, x=Dataset, y=AUC, gg)) +\n  geom_bar(stat=\"identity\", position = \"dodge\") + \n  scale_fill_brewer(palette = \"Set2\")\n\n``` \n<br>\n<br>\n#### Algorithms: HiCS, CMI and GMD\n\nThe following results are based on the same datasets that are above described.\nAdditionally experiments run with GMD-algorithm. (see: [GMD](https://github.com/holtri/Rsubcon))\nThe parameter changed: <br>\n* maxMinPts = 100   <br>\n* numCores=1        <br>\n* topkSearch = 50   <br>\n* topkOutput = 20   <br>\n\n```{r eval=T, echo=FALSE}\n<<plotTest>>\n```\n\n<br>\n<br>\n#### Runtime\n```{r, echo=FALSE, warning=FALSE}\nRuntime <- c(134.25, 120.01, 29.45, 26.43, 146.22, 36.86, 4547.24, 385.69, 902.45, 122.51, 26.6, 18.76)\ndfRun = data.frame(Dataset, Algorithm, Runtime) \nbarplot(dfRun$Runtime, \n        names.arg = Dataset,\n        main = \"Runtime in sec.\",\n        xlab=\"Dataset\", \n        ylab=\"Sec.\",\n        ylim = c(0, 5000),\n        col=c(\"darkblue\",\"deepskyblue\"),\n        legend = c(\"CMI\",\"HiCS\"))\n``` \n\n#### Subspaces\n```{r, echo=FALSE, warning=FALSE}\n\nSubspaceSizes = c(5, 3.2, 6.2, 2.6, 7.2, 2.4, 6.4, 3.2, 8.2, 2.4, 6.6, 2.2) \ndf = data.frame(Dataset, Algorithm, SubspaceSizes) \n\nggplot(df, aes(factor(Dataset), SubspaceSizes, fill=Algorithm, x=Dataset, y=SubspaceSizes, gg)) +\n  geom_bar(stat=\"identity\", position = \"dodge\") + \n  scale_fill_brewer(palette = \"Set2\") +\n  ggtitle(\"Average size of Top5-Subspaces\")\n\n```\n<br>\n<br>\nWith CMI Subspaces more dimensions were found. \nSome examples of found subspaces:\n```{r, echo=FALSE, warning=FALSE}\n\ncolum <- c(1,2,16:20)\ncolNam <- c(\"Algorithm\",\"Dataset\",\"Subspace 1\",\"Subspace 2\",\"Subspace 3\",\"Subspace 4\",\"Subspace 5\")\n\nload(\"results/Param_100_050_020_SSVec/experimentResult_glass_161129.RData\")\ncombRes <-combinedResult[,colum, with=FALSE]\ncombResUG <-combRes[!duplicated(combRes)]\nkable(combResUG, caption = \"Top-5-Subspaces - Glass-Dataset\", col.names = colNam)\n\nload(\"results/Param_100_050_020_SSVec/experimentResult_ion_161129.RData\")\ncombRes <-combinedResult[,colum, with=FALSE]\ncombResUI <-combRes[!duplicated(combRes)]\nkable(combResUI, caption = \"Top-5-Subspaces - Ion-Dataset\", col.names = colNam)\n\nload(\"results/Param_100_500_100/experimentResult_pen_161019.RData\")\ncombRes <-combinedResult[,colum, with=FALSE]\ncombResUP <-combRes[!duplicated(combRes)]\nkable(combResUP, caption = \"Top-5-Subspaces - Pendigits-Dataset\", col.names = colNam)\n\n```\n\n\n\n```{r eval=T, echo=FALSE, warning=FALSE}\n\n# load data for subspace evaluation\ncolSSVec <- c(1,2,36:55)\nload(\"results/Param_100_050_020_SSVec/experimentResult_ann_161129.RData\")\nannSS <-combinedResult[,colSSVec, with=FALSE]\nannSSU <-annSS[!duplicated(annSS$algorithm)]\n\n# load(\"results/Param_100_050_020_SSVec/experimentResult_ann_161129.RData\")\n# breastSS <-combinedResult[,colSSVec, with=FALSE]\n# breastU <-breastSS[!duplicated(breastSS$algorithm)]\n\nload(\"results/Param_100_050_020_SSVec/experimentResult_diabetes_161206.RData\")\ndiabSS <-combinedResult[,colSSVec, with=FALSE]\ndiabSSU <-diabSS[!duplicated(diabSS$algorithm)]\n\nload(\"results/Param_100_050_020_SSVec/experimentResult_glass_161129.RData\")\nglassSS <-combinedResult[,colSSVec, with=FALSE]\nglassSSU <-glassSS[!duplicated(glassSS$algorithm)]\n\nload(\"results/Param_100_050_020_SSVec/experimentResult_ion_161129.RData\")\nionSS <-combinedResult[,colSSVec, with=FALSE]\nionSSU <-ionSS[!duplicated(ionSS$algorithm)]\n\nload(\"results/Param_100_050_020_SSVec/experimentResult_lymph_161206.RData\")\nlympSS <-combinedResult[,colSSVec, with=FALSE]\nlympSSU <-lympSS[!duplicated(lympSS$algorithm)]\n\nload(\"results/Param_100_050_020_SSVec/experimentResult_pen_161206.RData\")\npenSS <-combinedResult[,colSSVec, with=FALSE]\npenSSU <-penSS[!duplicated(penSS$algorithm)]\n\nload(\"results/Param_100_050_020_SSVec/experimentResult_segmentn_161206.RData\")\nsegmSS <-combinedResult[,colSSVec, with=FALSE]\nsegmSSU <-segmSS[!duplicated(segmSS$algorithm)]\n\n\nssv <- rbind(annSSU, diabSSU, glassSSU, ionSSU, lympSSU, penSSU, segmSSU)\n\n # gather first \nlong_DF <- ssv %>% gather(name, subsp, subsp1V:subsp20V)\n# sortedSS <- long_DF[order(long_DF$dataset),]\n\n# subspace length\nlengthSS <- c(length(long_DF$subsp[[1]]))\n#   .. add length as new column\nfor (i in 2:length(long_DF$subsp)){\n    lengthSS <- c(lengthSS, length(long_DF$subsp[[i]]))\n}\nsubspaces <- mutate(long_DF, length = lengthSS) \n\n# mean per algorithm per dataset\n# datasDistinct <- subspaces %>% select(dataset) %>% distinct\n# algorDistinct <- subspaces %>% select(algorithm) %>% distinct\nalgdsDistinct <- subspaces %>% select(algorithm, dataset) %>% distinct\n\ndfMean <- data.frame()\nfor (i in 1:nrow(algdsDistinct)){\n \n  tmpdf <- filter(subspaces, subspaces$algorithm == algdsDistinct$algorithm[i] & subspaces$dataset == algdsDistinct$dataset[i])             %>% select(length)\n  \n  tmpMean <- mean(tmpdf$length)\n  # print(tmpMean)\n  v <- data.frame(dataset = algdsDistinct$dataset[i], algorithm = algdsDistinct$algorithm[i], mean = tmpMean)\n  dfMean  <- rbind(dfMean, v)\n\n}\n\n\nggplot(dfMean, aes(factor(dataset), mean, fill=algorithm, x=dataset, y=mean, gg)) +\n  geom_bar(stat=\"identity\", position = \"dodge\") + \n  scale_fill_brewer(palette = \"Set2\") +\n  labs(title =\"Average size of Top20-Subspaces\", y = \"Mean size\") \n``` \n\n\nObviously the size of the subspaces is much higher for CMI than for HiCs and for GMD. \nA reason is maybe the higher score a subspace gets by adding further dimensions. \n\n```{r eval=T, echo=FALSE, warning=FALSE}\n# MEAN\n#   global mean\nglobalMean <- mean(subspaces$length)\n\n#   mean per algorithm\nmeanAlg <- data.frame()\nSSCMI <- filter(subspaces, subspaces$algorithm == \"CMI\")\nmeanCMI <- mean(SSCMI$length)\nnL <- data.frame(algorithm = \"CMI\", mean = meanCMI)\nmeanAlg <- rbind(meanAlg, nL)\n\nSSHics <- filter(subspaces, subspaces$algorithm == \"HiCS\")\nmeanHics <- mean(SSHics$length)\nnL <- data.frame(algorithm = \"HiCS\", mean = meanHics)\nmeanAlg <- rbind(meanAlg, nL)\n\nSSGMD <- filter(subspaces, subspaces$algorithm == \"GMD\")\nmeanGMD <- mean(SSGMD$length)\nnL <- data.frame(algorithm = \"GMD\", mean = meanGMD)\nmeanAlg <- rbind(meanAlg, nL)\n\nggplot(meanAlg, mapping = aes(factor(algorithm), mean, x=algorithm, y=mean, gg)) +\ngeom_bar(stat=\"identity\", position = \"dodge\") + \n  scale_color_brewer(palette = \"Set2\") +\n  labs(title =\"Average size of Top20-Subspaces per algorithm\", y = \"Mean size\") \n``` ",
    "created" : 1479408219927.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "753364538",
    "id" : "385EFE44",
    "lastKnownWriteTime" : 1481045618,
    "last_content_update" : 1481045618405,
    "path" : "D:/Uni/SS16/Hiwi/github/TestsCMIHiCS/experimentCMIHiCSResults.Rmd",
    "project_path" : "experimentCMIHiCSResults.Rmd",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 6,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_markdown"
}