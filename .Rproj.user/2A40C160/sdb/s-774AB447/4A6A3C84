{
    "collab_server" : "",
    "contents" : "#include <Rcpp.h>\n#include <algorithm>\n#include \"searchBeam.h\"\n#include \"deviationFunctions.h\"\n#include \"CMI2.h\"\n\nusing namespace Rcpp;\n\nvoid print(const std::vector<int> &vec){\n  for (const auto& i: vec){\n    Rcpp::Rcout << i << \" \";\n  }\n  Rcpp::Rcout << std::endl;\n}\n\nstd::string toString(const std::vector<int> &vec){\n  std::stringstream ss;\n  for (const auto& i: vec){\n    ss << i << \" \";\n  }\n  return ss.str();\n}\n\nbool containsProjection(std::set<std::vector<int> > subspaces, std::vector<int> candidate){\n  for(unsigned int i=0; i < candidate.size(); i++){\n    std::vector<int> tmp = candidate;\n    tmp.erase(tmp.begin()+i);\n    if(std::find(subspaces.begin(), subspaces.end(), tmp) == subspaces.end()) {\n      return false;\n    }\n  }\n  return true;\n}\n\nstd::vector< std::vector<int> > aprioriMerge(std::vector< std::vector<int> > initialSpaces){\n  typedef  std::map<std::vector<int>, std::vector<int> > PrefixMap;\n  PrefixMap m;\n\n  std::set<std::vector<int> > subspaces;\n  for (auto it = begin (initialSpaces); it != end (initialSpaces); ++it) {\n\n    std::vector<int> sub = *it;\n    subspaces.insert(sub);\n\n    std::vector<int> prefix(sub.begin(), sub.end() -1);\n    int suffix = sub[sub.size()-1];\n\n    std::vector<int> value {suffix};\n    std::pair<PrefixMap::iterator, bool> result = m.insert(std::make_pair(prefix,value));\n    if(!result.second) {\n      m[prefix].push_back(suffix);\n    }\n  }\n  std::vector<std::vector<int> > candidates;\n  for (auto it=m.begin(); it!=m.end(); ++it){\n\n    std::vector<int> prefix = it->first;\n    std::vector<int> sfx = m[prefix];\n    std::sort(sfx.begin(), sfx.end());\n    for(auto i = sfx.begin(); i != sfx.end()-1; ++i){\n      for(auto j = i+1; j != sfx.end(); ++j){\n        std::vector<int> c = prefix;\n        c.push_back(*i);\n        c.push_back(*j);\n        // Rcpp::Rcout << \"prefix: \" << toString(prefix) << \"suffix i:\" << *i << \" suffix j: \" << *j <<std::endl;\n        if(containsProjection(subspaces,c)){\n          candidates.push_back(c);\n        }\n      }\n    }\n  }\n  return candidates;\n}\n\nvoid updateSearchBeam(std::vector< std::vector<int> > candidates,\n                 std::priority_queue<Subspace, std::vector<Subspace>, AscendingComp>& searchBeam,\n                 std::priority_queue<Subspace, std::vector<Subspace>, AscendingComp>& outputBeam,\n                 int topkSearch,\n                 int topkOutput,\n                 NumericMatrix indexMap,\n                 double alpha,\n                 int numRuns){\n  for(auto s : candidates){\n    double contrast = HiCSContrastC(indexMap, wrap(s), alpha, numRuns);\n    pushFixedSize(searchBeam, {s, contrast}, topkSearch);\n    pushFixedSize(outputBeam, {s, contrast}, topkOutput);\n  }\n}\n\nstd::vector< std::vector<int> > twoDimProjections(int dimensionality){\n  std::vector< std::vector<int> > twoDimProjections;\n  for(auto i = 1; i <= dimensionality; i++){\n    for(auto j = i+1; j <= dimensionality; j++){\n      twoDimProjections.push_back({i, j});\n    }\n  }\n  return twoDimProjections;\n}\n\nRcpp::List constructResultList(std::priority_queue<Subspace, std::vector<Subspace>, AscendingComp> outputBeam){\n  Rcpp::List result;\n\n  std::vector< std::vector<int> > tmp = subspaceVector(outputBeam);\n  Rcpp::List outputSpaces;\n  for (auto it = tmp.rbegin(); it != tmp.rend(); ++it) {\n    outputSpaces.push_back(*it);\n  }\n\n  result[\"subspaces\"] = outputSpaces;\n  std::vector<double> contrast = contrastVector(outputBeam);\n  std::reverse(contrast.begin(), contrast.end());\n  result[\"contrast\"] = contrast;\n\n  return result;\n}\n\nList HiCSSearch(NumericMatrix indexMap, double alpha, int numRuns, int topkSearch, int topkOutput){\n\n  std::priority_queue<Subspace, std::vector<Subspace>, AscendingComp> searchBeam;\n  std::priority_queue<Subspace, std::vector<Subspace>, AscendingComp> outputBeam;\n  std::vector< std::vector<int> > candidates;\n\n  candidates = twoDimProjections(indexMap.ncol());\n  int dim = 2;\n  while(candidates.size()>0){\n    Rcpp::Rcout << \"number of \" << dim <<  \"-dim candidates: \" << candidates.size() << std::endl;\n    searchBeam = std::priority_queue<Subspace, std::vector<Subspace>, AscendingComp>();\n    updateSearchBeam(candidates, searchBeam, outputBeam, topkSearch, topkOutput, indexMap, alpha, numRuns);\n    candidates = aprioriMerge(subspaceVector(searchBeam));\n    dim ++;\n  }\n\n  return constructResultList(outputBeam);\n}\n\nvoid updateSearchBeamCMI(std::vector< std::vector<int> > candidates,\n                      std::priority_queue<Subspace, std::vector<Subspace>, AscendingComp>& searchBeam,\n                      std::priority_queue<Subspace, std::vector<Subspace>, AscendingComp>& outputBeam,\n                      int topkSearch,\n                      int topkOutput,\n                      NumericMatrix data,\n                      unsigned int numCluster){\n  for(auto s : candidates){\n    double contrast = cmi2(data, wrap(s), numCluster);\n    pushFixedSize(searchBeam, {s, contrast}, topkSearch);\n    pushFixedSize(outputBeam, {s, contrast}, topkOutput);\n  }\n}\n\nList CMISearch(Rcpp::NumericMatrix data, unsigned int numCluster, int topkSearch, int topkOutput){\n\n  std::priority_queue<Subspace, std::vector<Subspace>, AscendingComp> searchBeam;\n  std::priority_queue<Subspace, std::vector<Subspace>, AscendingComp> outputBeam;\n  std::vector< std::vector<int> > candidates;\n\n  candidates = twoDimProjections(data.ncol());\n  int dim = 2;\n  while(candidates.size()>0){\n    Rcpp::Rcout << \"number of \" << dim <<  \"-dim candidates: \" << candidates.size() << std::endl;\n    searchBeam = std::priority_queue<Subspace, std::vector<Subspace>, AscendingComp>();\n    updateSearchBeamCMI(candidates, searchBeam, outputBeam, topkSearch, topkOutput, data, numCluster);\n    candidates = aprioriMerge(subspaceVector(searchBeam));\n    dim ++;\n  }\n\n  return constructResultList(outputBeam);\n}\n\n",
    "created" : 1476798632334.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "504230049",
    "id" : "4A6A3C84",
    "lastKnownWriteTime" : 1474991279,
    "last_content_update" : 1474991279,
    "path" : "D:/Uni/SS16/Hiwi/github/R-subcon/src/HiCSSearch.cpp",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 9,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "cpp"
}